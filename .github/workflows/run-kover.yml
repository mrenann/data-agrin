name: Android Kover Test Coverage

on:
  pull_request:
    branches: [ master ]

permissions:
  pull-requests: write
  contents: read

jobs:
  test-coverage:
    name: Generate Test Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests with Kover
        run: |
          ./gradlew test koverXmlReport --stacktrace

      - name: Store XML report
        uses: actions/upload-artifact@v4
        with:
          name: kover-xml-report
          path: build/reports/kover/xml/report.xml

      - name: Extract coverage percentage
        id: kover-report
        run: |
          echo "Searching for reports in all modules:"
          find . -name "report.xml" | grep -i kover

          echo "Contents of report directories:"
          find . -path "*/build/reports/kover*" -type d | xargs ls -la 2>/dev/null || echo "No directories found"

          if [ -d "app/build/reports/kover" ]; then
            echo "Found report directory in app module:"
            ls -la app/build/reports/kover/
          fi
          
          REPORT_FILES=$(find . -name "report.xml" | grep -i kover)
          
          if [ -z "$REPORT_FILES" ]; then
            echo "‚ùå No report.xml file found"
            COVERAGE_PERCENTAGE="NA"
          else
            TOTAL_COVERED=0
            TOTAL_MISSED=0
          
            echo "Processing the following reports:"
            echo "$REPORT_FILES"

            for REPORT_PATH in $REPORT_FILES; do
              echo "Analyzing report: $REPORT_PATH"
              echo "Report contents:"
              cat "$REPORT_PATH"

              LINE_COVERED=$(grep -o 'type="LINE".*covered="[0-9]*"' "$REPORT_PATH" | grep -o 'covered="[0-9]*"' | grep -o '[0-9]*' | awk '{ sum += $1 } END { print sum }')
              LINE_MISSED=$(grep -o 'type="LINE".*missed="[0-9]*"' "$REPORT_PATH" | grep -o 'missed="[0-9]*"' | grep -o '[0-9]*' | awk '{ sum += $1 } END { print sum }')
          
              echo "Report $REPORT_PATH - covered lines: $LINE_COVERED, missed lines: $LINE_MISSED"

              TOTAL_COVERED=$((TOTAL_COVERED + LINE_COVERED))
              TOTAL_MISSED=$((TOTAL_MISSED + LINE_MISSED))
            done
          
            echo "Combined total - Covered lines: $TOTAL_COVERED, Missed lines: $TOTAL_MISSED"

            TOTAL_LINES=$((TOTAL_COVERED + TOTAL_MISSED))
          
            if [ "$TOTAL_LINES" -eq 0 ]; then
              echo "‚ö†Ô∏è No lines of code to test found in all reports."
              COVERAGE_PERCENTAGE="NA"
            else
              TOTAL_COVERAGE=$(echo "scale=4; $TOTAL_COVERED / $TOTAL_LINES" | bc)
              COVERAGE_PERCENTAGE=$(echo "scale=2; $TOTAL_COVERAGE * 100" | bc -l)
              echo "üìä Calculated coverage: ${COVERAGE_PERCENTAGE}%"
            fi
          fi
          
          echo "coverage=$COVERAGE_PERCENTAGE" >> $GITHUB_OUTPUT

          {
            echo "## Code Coverage Report"
            echo
            echo "### Summary"
            echo "* Total covered lines: $TOTAL_COVERED"
            echo "* Total missed lines: $TOTAL_MISSED"
            echo "* Total lines: $TOTAL_LINES"
            echo "* Coverage percentage: ${COVERAGE_PERCENTAGE}%"
            echo
            echo "### Reports Found"
            echo "$REPORT_FILES"
            echo
            echo "### Report Contents"
          
            for REPORT_PATH in $REPORT_FILES; do
              echo
              echo "#### $REPORT_PATH"
              echo '```xml'
              cat "$REPORT_PATH"
              echo '```'
            done
          } > coverage-report.md
          
          echo "debug_report=coverage-report.md" >> $GITHUB_OUTPUT

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: test-coverage
          message: |
            ## üìä Code Coverage
            
            **Total Coverage: ${{ steps.kover-report.outputs.coverage == 'NA' && 'N/A - No code to test' || format('{0}%', steps.kover-report.outputs.coverage) }}**
            
            <details>
              <summary>Coverage Details</summary>
            
              This report was generated by Kover v0.9.1
            
              ${{ steps.kover-report.outputs.coverage == 'NA' && '‚ö†Ô∏è **Warning**: No lines of code found to test. This may indicate that:' || '' }}
              ${{ steps.kover-report.outputs.coverage == 'NA' && '- The project does not contain testable code' || '' }}
              ${{ steps.kover-report.outputs.coverage == 'NA' && '- Kover is not configured to locate the source code' || '' }}
              ${{ steps.kover-report.outputs.coverage == 'NA' && '- Tests are not being executed properly' || '' }}
            
              ${{ steps.kover-report.outputs.coverage != 'NA' && 'To improve coverage:' || '' }}
              ${{ steps.kover-report.outputs.coverage != 'NA' && '- Add tests for uncovered functions and classes' || '' }}
              ${{ steps.kover-report.outputs.coverage != 'NA' && '- Ensure conditional flows are covered' || '' }}
              ${{ steps.kover-report.outputs.coverage != 'NA' && '- Verify that exceptions and error cases are tested' || '' }}
            </details>

      - name: Upload debug report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-debug-report
          path: coverage-report.md

      - name: Check coverage threshold
        run: |
          MIN_COVERAGE=70
          COVERAGE="${{ steps.kover-report.outputs.coverage }}"
          
          if [ "$COVERAGE" == "NA" ]; then
            echo "‚ö†Ô∏è Could not calculate coverage - no lines of code to test"
            echo "::error::‚ö†Ô∏è No testable code lines found. Please check Kover configuration."
            exit 1
          elif (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "::error::‚ö†Ô∏è Coverage below the threshold of ${MIN_COVERAGE}% (Current: ${COVERAGE}%)"
            exit 1
          else
            echo "‚úÖ Coverage is above the threshold of ${MIN_COVERAGE}%"
          fi